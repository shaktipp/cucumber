def v_bitBucketUrl = 'https://github.com/shaktipp/cucumber.git'
def v_gitHubUrl = 'https://github.com/shaktipp/cucumber.git'
def v_bitbucketBranchName = 'master'
def v_pomFilePath = 'MathCucumberApp/pom.xml'
def v_imageName = 'omfico/mathcucumber-image'
def v_dockerfilePath = 'MathCucumberApp/dmp/docker'
def v_cucumberReportPath = 'MathCucumberApp/target/cucumber.json'
def v_junitReportPath = 'MathCucumberApp/target/surefire-reports/*.xml'
def v_htmlReportPath = 'MathCucumberApp/target/site/jacoco/'
def v_mailRecipients = 'shaktiprasadapanda@fico.com';
//def v_failNotification = 'shaktiprasadapanda@fico.com,shaktipp@gmail.com';
def v_jobName = currentBuild.fullDisplayName

/////////////////////////////////////////////PLEASE DONT EDIT/DELETE BELOW CODE//////////////////////////////////////////////////////
pipeline {
	

	agent any

	tools {
		maven 'Maven352'
	}
	
 	stages {
		
		stage('Checkout') {
			steps {
				//git credentialsId: 'BitBucket', url: v_bitBucketUrl, branch: v_bitbucketBranchName
				git v_gitHubUrl
			}
		}
		stage('Build') {
			steps {
 				sh "mvn -f ${v_pomFilePath} clean compile"
			}
		}
		stage('Test') {
			steps {
				sh "mvn -f ${v_pomFilePath} -Dmaven.test.failure.ignore=flase test"
				junit '**/target/surefire-reports/TEST-*.xml'
				archive 'target/*.jar'
			}
		}
		
		
		stage('Cucumber') {
			steps {
				sh "mvn -f ${v_pomFilePath} verify"
			}
		}
		
		stage('Sonar Scan') {
			steps {
				sh "mvn -f ${v_pomFilePath} sonar:sonar"
			}
		}
       
		

	}//End of stages	
	post{
		always {
            //generate cucumber reports
            cucumber "${v_cucumberReportPath}"
            junit "${v_junitReportPath}"			
			
            
            // publish html
	        publishHTML( target: [
	            allowMissing: false,
	            alwaysLinkToLastBuild: false,
	            keepAll: true,
	            reportDir: "${v_htmlReportPath}",
	            reportFiles: 'index.html',
	            reportName: 'JaCoCo Report'
	          ])
			  
	    script {
                currentBuild.result = currentBuild.currentResult
        }
	    emailext body: '''${SCRIPT, template="email-groovy.template"}''',
            mimeType: 'text/html',
            subject: "[Jenkins] ${v_jobName}",
            to: "${v_mailRecipients}",
            replyTo: "${v_mailRecipients}",
            recipientProviders: [[$class: 'CulpritsRecipientProvider']]
        } // End of always block

	
	}//End of post
		
}
